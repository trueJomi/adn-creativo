---

interface Props {
    class?: string
}

const { class: className } = Astro.props

---
<div id="modal-container">
    <div class="modal-background">
        <div class="modal px-5" onclick="event.stopPropagation()" >
          <slot/>
        </div>
      </div>
    </div>
    <div class={className} id="unfolding">
        <slot name="button"/>
    </div>
</div>
<style>
    #modal-container {
        position:fixed;
        display:table;
        height:100%;
        width:100%;
        top:0;
        left:0;
        transform:scale(0);
        z-index:1;
        &.unfolding {
            transform:scaleY(.01) scaleX(0);
            animation:unfoldIn .5s cubic-bezier(0.165, 0.840, 0.440, 1.000) forwards;
            .modal-background {
                .modal {
                    transform:scale(0);
                    animation: zoomIn .25s .4s cubic-bezier(0.165, 0.840, 0.440, 1.000) forwards;
                }
            }
            &.out {
                transform:scale(1);
                animation:unfoldOut .5s .15s cubic-bezier(0.165, 0.840, 0.440, 1.000) forwards;
                .modal-background {
                    .modal {
                        animation: zoomOut .25s cubic-bezier(0.165, 0.840, 0.440, 1.000) forwards;
                    }
                }
            }
        }
        .modal-background {
            display:table-cell;
            background:rgba(0,0,0,.8);
            text-align:center;
            vertical-align:middle;
            .modal {
                /* background:white; */
                /* padding:50px; */
                z-index: 2;
                display:inline-block;
                /* border-radius:3px; */
                /* font-weight:300; */
                position:relative;
            }
        }
    }

    @keyframes unfoldIn {
        0% {
            transform:scaleY(.005) scaleX(0);
        }
        50% {
            transform:scaleY(.005) scaleX(1);
        }
        100% {
            transform:scaleY(1) scaleX(1);
        }
    }

    @keyframes zoomIn {
        0% {
            transform:scale(0);
        }
        100% {
            transform:scale(1);
        }
    }

    @keyframes unfoldOut {
        0% {
            transform:scaleY(1) scaleX(1);
        }
        50% {
            transform:scaleY(.005) scaleX(1);
        }
        100% {
            transform:scaleY(.005) scaleX(0);
        }
    }

    @keyframes zoomOut {
        0% {
            transform:scale(1);
        }
        100% {
            transform:scale(0);
        }
    }
</style>
<script>
    const modalContainer = document.getElementById('modal-container');
    
    const unfoldingButton = document.getElementById('unfolding');

    if (!modalContainer || !unfoldingButton) {
        throw new Error('ModalUnfolding component must have a modal-container and a button');
    }

    unfoldingButton.addEventListener('click', () => {
        console.log(unfoldingButton.id);
        modalContainer?.removeAttribute('class');
        modalContainer?.classList.add("unfolding");
        document.body.classList.add('modal-active');
    });

    modalContainer.addEventListener('click', () => {
        modalContainer?.classList.add('out');
        document.body.classList.remove('modal-active');
    });

</script>